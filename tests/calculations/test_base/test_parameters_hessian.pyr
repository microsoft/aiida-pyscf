#!/usr/bin/env python
"""Script automatically generated by `pyscf.base` plugin of `aiida-pyscf`."""


def main():
    import time

    results = {
        'timings': {}
    }

    time_start = time.perf_counter()


    # Section: Results
    def write_results_and_exit(results):
        import dill
        import json
        import sys

        results['timings']['total'] = time.perf_counter() - time_start

        with open('results.json', 'w') as handle:
            json.dump(results, handle)

        with open('model.pickle', 'wb') as handle:
            # Need to unset the ``_chkfile`` attribute as it contains an open file handle which cannot be unpickled.
            mean_field_run._chkfile = None
            dill.dump(mean_field_run, handle)

        sys.exit(0)

    # Section: Structure definition
    from pyscf import gto
    structure = gto.Mole()
    structure.unit = 'Ang'
    structure.atom = """
    O       0.000000000000000      0.000000000000000      0.119262000000000
    H       0.000000000000000      0.763239000000000     -0.477047000000000
    H       0.000000000000000     -0.763239000000000     -0.477047000000000
    """
    structure.build()

    # Section: Mean field
    from pyscf import scf
    mean_field = scf.RHF(structure)
    mean_field.chkfile = 'checkpoint.chk'
    density_matrix = None
    mean_field_start = time.perf_counter()
    mean_field_run = mean_field.run(density_matrix)

    results['timings']['mean_field'] = time.perf_counter() - mean_field_start
    results['mean_field'] = {}
    results['mean_field']['is_converged'] = mean_field_run.converged
    results['mean_field']['total_energy'] = mean_field_run.e_tot
    results['mean_field']['forces'] = (- mean_field_run.nuc_grad_method().kernel()).tolist()

    if mean_field_run.converged:
        results['mean_field']['molecular_orbitals'] = {}
        results['mean_field']['molecular_orbitals']['energies'] = mean_field_run.mo_energy.tolist()
        results['mean_field']['molecular_orbitals']['labels'] = structure.ao_labels()
        results['mean_field']['molecular_orbitals']['occupations'] = mean_field_run.mo_occ.tolist()
    else:
        write_results_and_exit(results)


    # Section: Hessian
    import numpy
    from pyscf import hessian
    hessian_start = time.perf_counter()
    hessian = mean_field_run.Hessian().kernel()

    with open('hessian.npy', 'wb') as handle:
        numpy.save(handle, hessian)

    results['timings']['hessian'] = time.perf_counter() - hessian_start



    write_results_and_exit(results)


if __name__ == '__main__':
    main()
