#!/usr/bin/env python
"""Script automatically generated by `pyscf.base` plugin of `aiida-pyscf`."""


def main():
    import time

    results = {
        'timings': {}
    }

    time_start = time.perf_counter()


    # Section: Results
    def write_results_and_exit(results):
        import dill
        import json
        import sys

        results['timings']['total'] = time.perf_counter() - time_start

        with open('results.json', 'w') as handle:
            json.dump(results, handle)

        with open('model.pickle', 'wb') as handle:
            # Need to unset the ``_chkfile`` attribute as it contains an open file handle which cannot be unpickled.
            mean_field_run._chkfile = None
            # Need to unset the ``opt`` attribute as it is ctypes objects containing pointers cannot be pickled.
            mean_field_run.opt = None
            dill.dump(mean_field_run, handle)

        sys.exit(0)

    # Section: Structure definition
    from pyscf import gto
    structure = gto.Mole()
    structure.unit = 'Ang'
    structure.atom = """
    O       0.000000000000000      0.000000000000000      0.119262000000000
    H       0.000000000000000      0.763239000000000     -0.477047000000000
    H       0.000000000000000     -0.763239000000000     -0.477047000000000
    """
    structure.build()

    # Section: Mean field
    from pyscf import scf
    mean_field = scf.RHF(structure)
    mean_field.chkfile = 'checkpoint.chk'
    density_matrix = None
    mean_field_start = time.perf_counter()
    mean_field_run = mean_field.run(density_matrix)

    results['timings']['mean_field'] = time.perf_counter() - mean_field_start
    results['mean_field'] = {}
    results['mean_field']['is_converged'] = mean_field_run.converged
    results['mean_field']['total_energy'] = mean_field_run.e_tot
    results['mean_field']['forces'] = (- mean_field_run.nuc_grad_method().kernel()).tolist()

    if mean_field_run.converged:
        results['mean_field']['molecular_orbitals'] = {}
        results['mean_field']['molecular_orbitals']['energies'] = mean_field_run.mo_energy.tolist()
        results['mean_field']['molecular_orbitals']['labels'] = structure.ao_labels()
        results['mean_field']['molecular_orbitals']['occupations'] = mean_field_run.mo_occ.tolist()
    else:
        write_results_and_exit(results)



    from pyscf import lib
    from pyscf.dft.dks import DKS
    from pyscf.dft.gks import GKS
    from pyscf.scf.dhf import DHF
    from pyscf.scf.ghf import GHF
    from pyscf.tools import cubegen

    hf = mean_field_run

    results['timings']['cubegen'] = {}

    time_start = time.perf_counter()
    for index in [5, 6]:
        cubegen.orbital(hf.mol, f'mo_{index}.cube', hf.mo_coeff[:,index], **{'nx': 40, 'ny': 40, 'nz': 40, 'margin': 3.0})
    results['timings']['cubegen']['orbitals'] = time.perf_counter() - time_start




    write_results_and_exit(results)


if __name__ == '__main__':
    main()
