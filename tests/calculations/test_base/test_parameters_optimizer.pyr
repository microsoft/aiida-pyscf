import json
import time



results = {
    'timings': {}
}

time_start = time.perf_counter()

from pyscf import gto
structure = gto.Mole()
structure.basis = 'def2-tzvp'
structure.charge = 0
structure.spin = 0
structure.unit = 'Ang'
structure.atom = """
O       0.000000000000000      0.000000000000000      0.119262000000000
H       0.000000000000000      0.763239000000000     -0.477047000000000
H       0.000000000000000     -0.763239000000000     -0.477047000000000

"""
structure.build()
from pyscf import scf

mean_field = scf.UKS(structure)



time_mean_field_start = time.perf_counter()
mean_field_run = mean_field.run()

results['timings']['mean_field'] = time.perf_counter() - time_mean_field_start
results['total_energy'] = mean_field_run.e_tot
results['forces'] = (- mean_field_run.nuc_grad_method().kernel()).tolist()
convergence_parameters = {}


convergence_parameters['convergence_energy'] = 2.0



time_optimizer_start = time.perf_counter()

optimizer = mean_field.Gradients().optimizer(solver='geomeTRIC')
optimized = optimizer.kernel(convergence_parameters)

results['timings']['optimizer'] = time.perf_counter() - time_optimizer_start
results['optimized_coordinates'] = optimized.atom_coords().tolist()
results['timings']['total'] = time.perf_counter() - time_start

with open('results.json', 'w') as handle:
    json.dump(results, handle)
